<?php

/**
 * @file
 * FBA Geo Vocab initialisation solution pack module
 */

/**
 * FBA geo vocab sp required fedora objects.
 *
 * @return array
 */
function fba_geovocab_sp_required_fedora_objects() {
  module_load_include('inc', 'fedora_repository', 'fedora_repository.solutionpacks');
  // Add the form and associate it to the content model.
  $module_path = drupal_get_path('module', 'fba_geovocab_sp');

  $form_name = 'FBA Vocab Pref Term Form';
  $form_xml = file_get_contents("$module_path/xml/forms/FBAVocabPrefForm.xml");
  solution_pack_add_form($form_name, $form_xml);
  fba_geovocab_sp_solution_pack_add_form_association('fba:vocabpref_CModel', $form_name, "['authority']['topic']", 'vocabpref_mads_to_dc.xsl');

  $form_name = 'FBA Vocab NonPref Term Form';
  $form_xml = file_get_contents("$module_path/xml/forms/FBAVocabNonPrefForm.xml");
  solution_pack_add_form($form_name, $form_xml);
  fba_geovocab_sp_solution_pack_add_form_association('fba:vocabnonpref_CModel', $form_name, "['variant']['topic']", 'vocabnonpref_mads_to_dc.xsl');

  $form_name = 'FBA Geo Pref Term Form';
  $form_xml = file_get_contents("$module_path/xml/forms/FBAGeoPrefForm.xml");
  solution_pack_add_form($form_name, $form_xml);
  fba_geovocab_sp_solution_pack_add_form_association('fba:geopref_CModel', $form_name, "['authority']['topic']", 'geopref_mads_to_dc.xsl');

  $form_name = 'FBA Geo NonPref Term Form';
  $form_xml = file_get_contents("$module_path/xml/forms/FBAGeoNonPrefForm.xml");
  solution_pack_add_form($form_name, $form_xml);
  fba_geovocab_sp_solution_pack_add_form_association('fba:geononpref_CModel', $form_name, "['variant']['topic']", 'geononpref_mads_to_dc.xsl');


  return array(
    'fba_geovocab_sp' => array(
      'module' => 'fba_geovocab_sp',
      'title' => 'FBA Geo Vocab Solution Pack',
      'objects' => array(
        //CModels
        array(
          'pid' => 'fba:vocabpref_CModel',
          'label' => 'FBA Vocabulary Preferred Term content model',
          'dsid' => 'ISLANDORACM',
          'datastream_file' => "$module_path/xml/cmodel/fba_vocab_pref_CModel.xml",
          'cmodel' => 'fedora-system:ContentModel-3.0',
        ),
        //next CModel
        array(
          'pid' => 'fba:vocabnonpref_CModel',
          'label' => 'FBA Vocabulary non-preferred Term content model',
          'dsid' => 'ISLANDORACM',
          'datastream_file' => "$module_path/xml/cmodel/fba_vocab_nonpref_CModel.xml",
          'cmodel' => 'fedora-system:ContentModel-3.0',
        ),
        //next CModel
        array(
          'pid' => 'fba:geopref_CModel',
          'label' => 'FBA Geo Preferred Term content model',
          'dsid' => 'ISLANDORACM',
          'datastream_file' => "$module_path/xml/cmodel/fba_geo_pref_CModel.xml",
          'cmodel' => 'fedora-system:ContentModel-3.0',
        ),
        //next CModel
        array(
          'pid' => 'fba:geononpref_CModel',
          'label' => 'FBA Geo non-preferred Term content model',
          'dsid' => 'ISLANDORACM',
          'datastream_file' => "$module_path/xml/cmodel/fba_geo_nonpref_CModel.xml",
          'cmodel' => 'fedora-system:ContentModel-3.0',
        ),
        //end of CModels
        //collections
        array(
          'pid' => 'fba:geovocab_collection',
          'label' => 'FBA GeoVocab Term Collections',
          'cmodel' => 'islandora:collectionCModel',
          'parent' => variable_get('fedora_repository_pid', 'islandora:root'),
          'datastreams' => array(
            array(
              'dsid' => 'TN',
              'datastream_file' => "$module_path/images/Crystal_Clear_filesystem_folder_grey.png",
              'mimetype' => 'image/png',
            ),
            array(
              'dsid' => 'COLLECTION_POLICY',
              'datastream_file' => "$module_path/xml/cpolicy/Collection_Policy.xml",
            ),
          ),
        ),
        //next collection
        array(
          'pid' => 'fba:vocabpref_collection',
          'label' => 'FBA Preferred Vocab Term Collection',
          'cmodel' => 'islandora:collectionCModel',
          'parent' => 'fba:geovocab_collection',
          'datastreams' => array(
            array(
              'dsid' => 'TN',
              'datastream_file' => "$module_path/images/Crystal_Clear_filesystem_folder_grey.png",
              'mimetype' => 'image/png',
            ),
            array(
              'dsid' => 'COLLECTION_POLICY',
              'datastream_file' => "$module_path/xml/cpolicy/FBA_vocab_pref_Collection_Policy.xml",
            ),
          ),
        ),
        //next collection
        array(
          'pid' => 'fba:vocabnonpref_collection',
          'label' => 'FBA NonPreferred Vocab Term Collection',
          'cmodel' => 'islandora:collectionCModel',
          'parent' => 'fba:geovocab_collection',
          'datastreams' => array(
            array(
              'dsid' => 'TN',
              'datastream_file' => "$module_path/images/Crystal_Clear_filesystem_folder_grey.png",
              'mimetype' => 'image/png',
            ),
            array(
              'dsid' => 'COLLECTION_POLICY',
              'datastream_file' => "$module_path/xml/cpolicy/FBA_vocab_nonpref_Collection_Policy.xml",
            ),
          ),
        ),
        //next collection
        array(
          'pid' => 'fba:geopref_collection',
          'label' => 'FBA Preferred Geo Term Collection',
          'cmodel' => 'islandora:collectionCModel',
          'parent' => 'fba:geovocab_collection',
          'datastreams' => array(
            array(
              'dsid' => 'TN',
              'datastream_file' => "$module_path/images/Crystal_Clear_filesystem_folder_grey.png",
              'mimetype' => 'image/png',
            ),
            array(
              'dsid' => 'COLLECTION_POLICY',
              'datastream_file' => "$module_path/xml/cpolicy/FBA_geo_pref_Collection_Policy.xml",
            ),
          ),
        ),
        //next collection
        array(
          'pid' => 'fba:geononpref_collection',
          'label' => 'FBA NonPreferred Geo Term Collection',
          'cmodel' => 'islandora:collectionCModel',
          'parent' => 'fba:geovocab_collection',
          'datastreams' => array(
            array(
              'dsid' => 'TN',
              'datastream_file' => "$module_path/images/Crystal_Clear_filesystem_folder_grey.png",
              'mimetype' => 'image/png',
            ),
            array(
              'dsid' => 'COLLECTION_POLICY',
              'datastream_file' => "$module_path/xml/cpolicy/FBA_geo_nonpref_Collection_Policy.xml",
            ),
          ),
        ),
      //end of collections
      ),
    //end of objects
    ),
      //end of fba_geovocab_sp
  ); //end of returned array
}

/**
 *
 *
 * @param array $content_model
 * @param array $form_name
 */
function fba_geovocab_sp_solution_pack_add_form_association($content_model, $form_name, $title_field, $transform) {
  // Associates the form with the content model
  $result = db_result(db_query('Select content_model from {islandora_content_model_forms} where  content_model = "%s" and form_name = "%s"', $content_model, $form_name));
  if (!$result) {
    $object = new stdClass();
    $object->content_model = $content_model;
    $object->form_name = $form_name;
    // SFOX : the next 3 fields have been customised for the geo vocab sp
    $object->dsid = 'MADS';
    $object->title_field = $title_field;
    $object->transform = $transform;
    //
    $result = drupal_write_record('islandora_content_model_forms', $object);
    drupal_set_message(t("Added association between @cm and @name", array("@cm" => $content_model, "@name" => $form_name)));
  }
}

function fba_geovocab_sp_form_alter(&$form, &$form_state, $form_id) {
  $x = $form_id;
}

/**
 * Function for when a new term is added
 * Copies the value from Approved Date to the 'dummy' dropdown on the form
 * @param type $form
 * @param type $form_state
 */
function fba_geovocab_sp_form_fedora_repository_ingest_form_alter(&$form, &$form_state) {
  switch ($form_state[values][forms]) {
    case "FBA Geo NonPref Term Form":
    case "FBA Geo Pref Term Form":
    case "FBA Vocab NonPref Term Form":
    case "FBA Vocab Pref Term Form": {
        $form['#validate'][] = 'fba_geovocab_sp_form_validate';
        if (isset($form['noteApprovedDate']['#default_value'])) {
          $approveddate = new DateTime($form['noteApprovedDate']['#default_value']);
          $year = $approveddate->format('Y');
          $month = $approveddate->format('n');
          $day = $approveddate->format('j');
          $form['noteApprovedDateDropdown']['#value']['day'] = $day;
          $form['noteApprovedDateDropdown']['#value']['month'] = $month;
          $form['noteApprovedDateDropdown']['#value']['year'] = $year;
        }
        break;
      }
  }
}

/**
 * Function for when a term is edited
 * Copies the value from Approved Date to the 'dummy' dropdown on the form
 *
 * @param type $form
 * @param type $form_state
 */
function fba_geovocab_sp_form_fedora_repository_edit_qdc_form_alter(&$form, &$form_state) {
  switch ($form_state[values][forms]) {
    case "FBA Geo NonPref Term Form":
    case "FBA Geo Pref Term Form":
    case "FBA Vocab NonPref Term Form":
    case "FBA Vocab Pref Term Form": {
        $form['#validate'][] = 'fba_geovocab_sp_form_validate';

        if (isset($form['noteApprovedDate']['#default_value'])) {
          $approveddate = new DateTime($form['noteApprovedDate']['#default_value']);
          $year = $approveddate->format('Y');
          $month = $approveddate->format('n');
          $day = $approveddate->format('j');
          $form['noteApprovedDateDropdown']['#value']['day'] = $day;
          $form['noteApprovedDateDropdown']['#value']['month'] = $month;
          $form['noteApprovedDateDropdown']['#value']['year'] = $year;
        }
        break;
      }
  }
}

/**
 * Function to copy the value from the date dropdown back to the form field(s)
 * @param type $form
 * @param type $form_state
 */
function fba_geovocab_sp_form_validate($form, &$form_state) {
  switch ($form_state[values][forms]) {
    case "FBA Geo NonPref Term Form":
    case "FBA Vocab NonPref Term Form": {
        // Grab the values from the date dropdown and put back into the hidden
        // approved date form field
        $month = $form['#post']['noteApprovedDateDropdown']['month'];
        $day = $form['#post']['noteApprovedDateDropdown']['day'];
        $year = $form['#post']['noteApprovedDateDropdown']['year'];

        $UTCdateformatstring = 'Y-m-d\TH:i:s';    // TODO: need to append '.\000Z' somehow;
        $dateastext = $month . '/' . $day . '/' . $year; //has to be USA format for some reason
        $datetimevalue = new DateTime($dateastext);
        //Translate to YYYY-MM-DDTHH:MM:SS.uuuZ

        $formatteddate = $datetimevalue->format($UTCdateformatstring) . '.000Z';
        $form_state['values']['noteApprovedDate'] = $formatteddate;

        // Process the record creation and record changed dates
        if (isset($form_state['values']['recordInfo']['recordInputDate'])) {
          // only put the date in if the field is blank
          if (empty($form_state['values']['recordInfo']['recordInputDate'])) {
            $form_state['values']['recordInfo']['recordInputDate'] = $formatteddate;
          }
        }
        else {
          // value doesn't yet exist, so create with Approved Date value
          $form_state['values']['recordInfo']['recordInputDate'] = $formatteddate;
        }

        //Change the date when the object was updated
        $todaysdate = new DateTime();
        $formattedtodaysdate = $todaysdate->format($UTCdateformatstring) . '.000Z';
        $form_state['values']['recordInfo']['recordChangeDate'] = $formattedtodaysdate;
        break;
      }
    case "FBA Geo Pref Term Form":
    case "FBA Vocab Pref Term Form": {
        // Grab the values from the date dropdown and put back into the hidden
        // approved date form field
        $month = $form['#post']['noteApprovedDateDropdown']['month'];
        $day = $form['#post']['noteApprovedDateDropdown']['day'];
        $year = $form['#post']['noteApprovedDateDropdown']['year'];

        $UTCdateformatstring = 'Y-m-d\TH:i:s';    // TODO: need to append '.\000Z' somehow;
        $dateastext = $month . '/' . $day . '/' . $year; //has to be USA format for some reason
        $datetimevalue = new DateTime($dateastext);
        //Translate to YYYY-MM-DDTHH:MM:SS.uuuZ

        $formatteddate = $datetimevalue->format($UTCdateformatstring) . '.000Z';
        $form_state['values']['noteApprovedDate'] = $formatteddate;

        // Process the record creation and record changed dates
        if (isset($form_state['values']['recordInfo']['recordCreationDate'])) {
          // only put the date in if the field is blank
          if (empty($form_state['values']['recordInfo']['recordCreationDate'])) {
            $form_state['values']['recordInfo']['recordCreationDate'] = $formatteddate;
          }
        }
        else {
          // value doesn't yet exist, so create with Approved Date value
          $form_state['values']['recordInfo']['recordCreationDate'] = $formatteddate;
        }

        //Change the date when the object was updated
        $todaysdate = new DateTime();
        $formattedtodaysdate = $todaysdate->format($UTCdateformatstring) . '.000Z';
        $form_state['values']['recordInfo']['recordChangeDate'][0] = $formattedtodaysdate;
        break;
      }
  }
  return;
}

